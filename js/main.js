$(function() {
    // Variable to store your files
    var files, dataset, ranges;

    // Add events
    $('input[type=file]').on('change', prepareUpload);

    // Grab the files and set them to our variable
    function prepareUpload(event) {
        files = event.target.files;
    }

    function BarChart(initialData, idName) {
        var rawData,
            chart,
            chartData;

        if(initialData) {
            rawData = initialData;
        }
        if(idName) {
            this.name = idName;
        }

        this.setData = function(data) {
            // add label to data
            rawData = data; 

            // data: {
            //   name: (string),
            //   values: [
            //     { label: (date), value: (int) }, ......
            //   ]
            // } 

            return this; // to chaining
        };
        
        this.setName = function(idName) {
            this.name = idName;
        };

        this.draw = function() {
            if(this.name) {
                if($('#' + this.name)) {
                    $('#' + this.name).remove();
                }
                var div = $('<div id="' + this.name + '"/>').appendTo('#charts');
                nv.addGraph(function() {
                    var height = 500;
                    
                    chart = nv.models.discreteBarChart()
                        .x(function(d) {
                            return d.label
                        })
                        .y(function(d) {
                            return d.value
                        })
                        .staggerLabels(true)
                        .showValues(true)
                        .duration(250)
                        .height(height);
                    var xAxis = chart.xAxis.axisLabel('ID')
                        .ticks(20);

                    chartData = d3.select(div[0])
                        .append("svg")
                        .datum(rawData)
                        .call(chart)
                        .style({ 'height': height });

                    nv.utils.windowResize(chart.update);
                    return chart;
                });
            } else {
                console.log('Please name your chart first!');
            }
            return this;
        };
        this.updateRange = function(range) {
            var newData = [{
                key: rawData.key,
                values: []
            }];
            var inRange = function(date, dateRange) {
                var date = new Date(date).getTime();
                return date >= new Date(dateRange.start).getTime() && date <= new Date(dateRange.end).getTime();
            };

            for (var i = 0; i < range.length; i++) {
                var total = 0, count = 0;
                rawData[0].values.forEach(function(v) {
                    if(inRange(v.label, range[i])) {
                        total += v.value;
                        count++;
                    }
                });
                newData[0].values.push({
                    label: range[i].start + '-' + range[i].end,
                    value: total / count
                })
            }

            chartData.datum(newData).transition().duration(500).call(chart);
            return this;
        };
    };

    dataset = (function () {
        var dimensions = [], activeCharts;
        var drawChart = function(dimensionPos) {
            var chart = new BarChart(dimensions[dimensionPos], 'chart1');
            chart.draw();
            activeCharts = chart;
        };
        var listDimension = function() {
            dimensions.forEach(function(d, k) {
                $('<option value="' + k + '">' + d[0].key + '</option>').appendTo('#dimension');
                if(!k) {
                    drawChart(k);
                }
            });
            $('#dimension').change(function() {
                drawChart($(this).val());
            });
        };
        return {
            init: function(initialData) {
                var dateRange = {};
                var length = initialData.name.length;
                // map row name to dimensions
                dimensions = initialData.name.map(function(v, k) {
                    if(k) { // skip date col
                        return [{
                            key: v,
                            values: [] //{label: (time), value: (int)}
                        }];
                    }
                });
                // map dimension data
                initialData.data.forEach(function(v, k) {
                    if(k === 0) {
                        dateRange.minDate = new Date(v[0]);
                    }
                    if(k === initialData.data.length - 1) {
                        dateRange.maxDate = new Date(v[0]);
                    }
                    for (var i = 1; i < v.length; i++) {
                        var value = parseFloat(v[i]);
                        dimensions[i][0].values.push({
                            label: v[0],
                            value: value ? value : 0
                        });
                    }
                });
                ranges.init(dateRange);
                dimensions.shift()
                listDimension();

            },
            drawChart: function(dimensionPos) {
                drawChart(dimensionPos);
            },
            getActiveCharts: function() {
                return activeCharts;
            },
            removeChart: function(chart) {

            },
            getDataRange: function() {

            }
        };
    }());

    ranges = (function() {
        var elements = $('.range-selector'),
            store = [];
        return {
            init: function(allDataRange) {
                this.setRangeStore($('.range-selector').length / 2);
                elements.change(function() {
                    var range = $(this).data('range'),
                        point = $(this).data('point');
                    store[range - 1][point] = $(this).val();
                    
                    ranges.checkUpdate();
                }).datepicker(allDataRange);
            },
            setRangeStore: function(length) {
                for (; length--; ) {
                    store.push({});
                }
            },
            checkUpdate: function() {
                var result = [];
                store.forEach(function(s) {
                    if(s.start && s.end) {
                        result.push(s);
                    }
                });
                if(result.length) {
                    
                    dataset.getActiveCharts().updateRange(result);
                }
            }
        };
    }());

    

    $('#get-file').click(function() {
        $(this).attr('disabled', true);
        $.ajax({
            url: 'https://obscure-hollows-88813.herokuapp.com',
            cache: false,
            dataType: 'json',
            processData: false, // Don't process the files
            contentType: false, // Set content type to false as jQuery will tell the server its a query string request
            success: function(data, textStatus, jqXHR) {
                $('#get-file').attr('disabled', false);
                if (typeof data.error === 'undefined') {
                    // if no error
                    console.log(data);
                    // barChart.setData('chart 1', data).draw();
                    // set range selector
                    // ranges.init();
                } else {
                    // Handle errors here
                    console.log('ERRORS: ' + data.error);
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Handle errors here
                console.log('ERRORS: ' + textStatus);
                // STOP LOADING SPINNER
            }
        });
    });
    var DATA = {"data":[["2015-06-13",4,15.95875,"-","-","-","-","-","-","-",15.958749999999998,4,"-"],["2015-06-14",8,13.905000000000001,"-","-","-","-",1,36,"-",7.592142857142858,7,"-"],["2015-06-15",7,5.848285714285714,"-","-","-","-",1,9,"-",5.3229999999999995,6,"-"],["2015-06-16",11,88.82391666666666,"-","-","-","-",5,200.4,"-",9.126714285714286,6,"-"],["2015-06-17",17,56.67391304347826,"-","-","-","-",10,93.46,"-",8.85,7,"-"],["2015-06-18",12,150.93635714285713,"-","-","-","-",5,347.33,"-",3.638625,7,"-"],["2015-06-19",11,45.398384615384614,"-","-","-","-",3,174.33,"-",6.7179,8,"-"],["2015-06-20",8,6.588,"-","-","-","-","-","-","-",6.588000000000001,8,"-"],["2015-06-21",4,457.21725,"-","-","-","-",2,902,"-",12.4345,2,"-"],["2015-06-22",2,6,"-","-","-","-",2,6,"-","-","-","-"],["2015-06-23",5,40.2,"-","-","-","-",5,40.2,"-","-","-","-"],["2015-06-25",6,55.88322222222222,"-","-","-","-",4,104.5,"-",16.989800000000002,2,"-"],["2015-06-26",3,18.502666666666666,"-","-","-","-",2,2.5,"-",50.508,1,"-"],["2015-06-27",2,18.268285714285717,"-","-","-","-","-","-","-",18.268285714285717,2,"-"],["2015-06-28",4,24.342625,"-","-","-","-",2,54,"-",14.456833333333334,2,"-"],["2015-06-29",1,169,"-","-","-","-",1,169,"-","-","-","-"],["2015-06-30",4,80.2,"-","-","-","-",4,80.2,"-","-","-","-"],["2015-07-01",3,36.035000000000004,"-","-","-","-",2,52.5,"-",3.105,1,"-"],["2015-07-02",7,598,"-","-","-","-",7,598,"-","-","-","-"],["2015-07-03",6,107.79316666666666,"-","-","-","-",4,103,"-",117.3795,2,"-"],["2015-07-04",2,530.926,"-","-","-","-",1,1057,"-",4.852,1,"-"],["2015-07-05",2,49.928,"-","-","-","-",1,94,"-",5.856,1,"-"],["2015-07-06",2,15.230333333333332,"-","-","-","-","-","-","-",15.230333333333334,2,"-"],["2015-07-07",2,9.681000000000001,"-","-","-","-","-","-","-",9.681000000000001,2,"-"],["2015-07-08",3,511,"-","-","-","-",3,511,"-","-","-","-"],["2015-07-09",8,30.10875,"-","-","-","-",3,69,"-",6.773999999999999,5,"-"],["2015-07-10",7,211.69459999999998,"-","-","-","-",3,418,"-",5.3892,4,"-"],["2015-07-11",5,5.553,"-","-","-","-","-","-","-",5.553,5,"-"],["2015-07-12",5,12.192,"-","-","-","-","-","-","-",12.192,5,"-"],["2015-07-13",177,52.53792405063292,0.0056,0.0056,1,1,77,98.8,0,18.180058823529407,100,0.01],["2015-07-14",163,110.34547368421053,0.0061,0.0061,1,1,93,189.99,0,9.056565217391306,70,0.0143],["2015-07-15",115,81.43005960264901,0.0087,0.0087,1,1,33,252.98,0,8.603198113207542,82,0.0122],["2015-07-16",86,84.81504166666667,"-","-","-","-",17,220.19,"-",9.218246753246756,69,"-"],["2015-07-17",190,37.745286290322575,0.0053,0,1,0,16,185.22,0,12.702033018867926,174,0],["2015-07-18",190,14.383407407407402,0.0053,0.0053,1,1,9,39.5,0,13.305442060085834,181,0.0055],["2015-07-19",156,17.555548913043477,0,0.0064,0,1,6,198.83,0,11.445061797752809,150,0.0067],["2015-07-20",181,55.77675619834711,0.0055,0.0055,1,1,20,386.11,0,12.55595794392523,162,0.0062],["2015-07-21",179,16.63933823529412,"-","-","-","-",11,113.18,"-",11.13691709844559,169,"-"],["2015-07-22",208,24.60713026819923,0.0048,0.0048,1,1,22,107.79,0.0455,12.56781140350877,187,0],["2015-07-23",206,33.2150703125,0.0049,0.0049,1,1,17,209.12,0.0588,13.330686956521737,189,0],["2015-07-24",167,48.29971497584542,0.006,0.006,1,1,31,184.03,0.0323,16.791910714285716,136,0],["2015-07-25",150,35.8939603960396,0,0,0,0,14,250.73,0,18.66085561497326,137,0],["2015-07-26",161,28.955171428571425,0,0,0,0,18,173.84,0,14.542335078534022,143,0],["2015-07-27",39,42.23001923076924,"-","-","-","-",8,78.83,"-",31.249025,32,"-"],["2015-07-28",20,154.2616976744186,0.05,0.05,1,1,9,306.72,0.1111,44.490120000000005,12,0],["2015-07-29",102,90.46869512195121,"-","-","-","-",23,258.38,"-",26.97366386554621,79,"-"],["2015-07-30",129,143.33885294117647,0.0078,0.0078,1,1,69,261.94,0.0145,19.019337349397585,62,0],["2015-07-31",100,43.07816783216783,"-","-","-","-",13,186.1,"-",19.822585365853655,87,"-"],["2015-08-01",118,36.45838562091504,0,0,0,0,6,288.55,0,16.93051408450705,112,0],["2015-08-02",70,47.34942105263158,0.0143,0.0143,1,1,3,504.2,0,21.968833333333336,67,0.0149],["2015-08-03",109,65.19828104575163,"-","-","-","-",30,174.19,"-",15.374638095238089,80,"-"],["2015-08-04",94,133.45265420560747,0.0106,0.0106,1,1,82,158.16,0,19.02284210526316,12,0.0833],["2015-08-05",153,138.42214772727272,"-","-","-","-",115,184.53,"-",8.115173913043478,38,"-"],["2015-08-06",2003,23.30795833333333,0.001,0.0005,2,1,708,54.71,0.0014,8.329907692307685,1297,0],["2015-08-07",490,27.20978921568626,0,0,0,0,128,82.49,0,9.88925107296137,362,0],["2015-08-08",274,21.120865030674846,"-","-","-","-",39,75.93,"-",13.455951048951052,235,"-"],["2015-08-09",388,26.09478957915833,"-","-","-","-",37,116.63,"-",18.205446623093685,351,"-"],["2015-08-10",216,33.58808571428572,0,0,0,0,31,152.26,0,14.384497925311196,186,0],["2015-08-11",221,39.67168064516128,0.0136,0.009,3,2,30,160.93,0.0667,19.613612781954874,191,0],["2015-08-12",845,71.28674210931484,0,0,0,0,225,186.59,0,22.360173245614046,620,0],["2015-08-13",1902,87.08203047404062,"-","-","-","-",792,188.04,"-",21.882995046439603,1122,"-"],["2015-08-14",4513,65.00559074833781,0.0157,0.0129,71,58,942,192.87,0.0127,20.308041428025934,3592,0.0128],["2015-08-15",4462,29.305591856519634,0.0061,0.0049,27,22,167,168.85,0.018,16.90804152005628,4300,0.0044],["2015-08-16",4925,23.479575499009602,0.0059,0.0051,29,25,140,216.94,0.0143,17.147671754523998,4789,0.0048],["2015-08-17",1467,46.77176517647061,0.0041,0.0027,6,4,180,201.29,0,20.579527242707794,1288,0.0031],["2015-08-18",374,84.91367399267398,0,0,0,0,183,157.61,0,30.801488817891375,195,0],["2015-08-19",345,140.5422602739726,0,0,0,0,152,357.19,0,20.69329787234042,195,0],["2015-08-20",278,155.35033076923077,0,0,0,0,125,337.01,0,27.635934497816596,153,0],["2015-08-21",171,113.75752232142857,0,0,0,0,62,261.94,0,21.41076086956521,109,0],["2015-08-22",81,52.09762962962963,0,0,0,0,30,97.54,0,28.416112676056333,51,0],["2015-08-23",70,47.77292142857142,0,0,0,0,21,66.68,0,43.66268695652174,49,0],["2015-08-24",80,61.45470810810812,0,0,0,0,42,97.64,0,45.745124031007755,40,0],["2015-08-25",64,77.35840845070425,0.0156,0.0156,1,1,25,158.56,0.04,46.6106213592233,39,0],["2015-08-26",90,125.94621428571432,"-","-","-","-",43,235.61,"-",51.90135042735042,50,"-"],["2015-08-27",142,156.95826562500002,0.0141,0.007,2,1,92,291.01,0.0109,35.67050595238096,51,0],["2015-08-28",299,76.62803987240828,0.0569,0.0535,17,16,29,203.18,0.2759,30.30671241830067,275,0.0291],["2015-08-29",39,96.89372093023256,0,0,0,0,16,282.57,0,36.90553846153846,23,0],["2015-08-30",41,144.65353932584267,0,0,0,0,18,295.1,0,68.15533898305085,24,0],["2015-08-31",62,79.19290960451977,0,0,0,0,25,235.14,0,29.15033582089552,38,0],["2015-09-01",47,103.02717475728156,0.0213,0,1,0,23,232.92,0,27.089215384615386,25,0],["2015-09-02",129,287.3851466666666,0.0155,0,2,0,93,500.26,0,52.62297196261684,37,0],["2015-09-03",110,336.94066206896554,0,0,0,0,90,444.56,0,33.90515789473684,20,0],["2015-09-04",41,55.09228947368421,0,0,0,0,14,81.78,0,46.810586206896545,27,0],["2015-09-05",52,63.1156715328467,"-","-","-","-",16,92.86,"-",52.91026470588234,38,"-"],["2015-09-06",55,70.32235795454545,0.0182,0.0182,1,1,19,146.63,0,47.14618518518519,37,0.027],["2015-09-07",68,140.04439877300615,"-","-","-","-",28,314.66,"-",55.911245454545465,41,"-"],["2015-09-08",58,173.25042990654205,"-","-","-","-",26,345.87,"-",47.964451612903225,32,"-"],["2015-09-09",63,90.05503424657535,0.0159,0.0159,1,1,32,149.57,0,56.14016129032258,31,0.0323],["2015-09-10",79,83.0057965116279,0.0127,0,1,0,35,148.05,0,49.04422123893806,44,0]],"name":["统计日期","访客数","平均停留时长(秒)","下单转化率","支付转化率","下单买家数","支付买家数","PC端访客数","PC端平均停留时长(秒)","PC端支付转化率","无线端平均停留时长(秒)","无线端访客数","无线端支付转化率"]};
    dataset.init(DATA);
});
